'''
name: 4 largest palindrome product
author: Eric He
date: Jan, 26th, 2013
result: 906609

hint: last step: find largest(), we could
earch through all numbers once, or we could search on each palindrome number, which was my approach, which was terrible
'''

def main():
    max = 0
    for a in xrange(999,99, -1):
        for b in xrange(a, 99, -1):
            # if the number itself is reversable
            n = a*b
            s = str(n)
            if s == s[::-1]:
                if n > max:
                    max = n
    print 'We now have the largest palindrome number could be generated by 2 3 digits, which is: {}'.format(max)



if __name__ == '__main__':
    main()







''' Completely different direction again. I generated the palindrome first, but
 divide them is a pain in the ass. Differently the guys generated all numbers
 and compare them to find the largest.''' 
#def palindrome_generate_STR(num):
#    num_list = list(str(num))
#    reverse_num = num_list[::-1]
#    return ''.join(num_list + reverse_num)
#
# main():
#    for i in range(999,99,-1):
#        palindrome_num = int(palindrome_generate_STR(i))
#
#if __name__ == '__main__':
#    main()

